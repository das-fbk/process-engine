-------------------------------
--   C O M P O S I T I O N   --
-------------------------------
MODULE dn_main

---------------------
--   I N P U T S   --
---------------------
IVAR input:
{
UNDEF, service409_PM_PaymentRequest, service409_PM_ExecutePayment, service409_RESET
};

-----------------------
--   O U T P U T S   --
-----------------------
IVAR output:
{
UNDEF, service409_PM_PaymentReply
};

-------------------------
--   S E R V I C E S   --
-------------------------
--	 service409
VAR service409: {ST2, ST1, ST3, ST0};
ASSIGN
next(service409) :=
case
(service409 = ST1 & input = service409_PM_ExecutePayment): ST2;
(service409 = ST1 & input = service409_RESET): ST0;
(service409 = ST0 & input = service409_PM_PaymentRequest): ST1;
(service409 = ST2 & input = service409_RESET): ST0;
(service409 = ST3 & input = service409_RESET): ST0;
(service409 = ST2 & output = service409_PM_PaymentReply): ST3;
1:service409;
esac;
TRANS ( output = service409_PM_PaymentReply) -> (service409 = ST2)
TRANS ( input = service409_PM_PaymentRequest) -> (service409 = ST0)
TRANS ( input = service409_PM_ExecutePayment) -> (service409 = ST1)
TRANS ( input = service409_RESET) -> (service409 = ST2 | service409 = ST1 | service409 = ST3)

-----------------------
--   O B J E C T S   --
-----------------------
--	 HandlePayment
VAR HandlePayment: {PAYMENT_EXECUTED, INITIAL};
ASSIGN
next(HandlePayment) :=
case
(HandlePayment = PAYMENT_EXECUTED & output = service409_PM_PaymentReply): INITIAL;
(HandlePayment = INITIAL & output = service409_PM_PaymentReply): PAYMENT_EXECUTED;
1:HandlePayment;
esac;
--	 PayPalPayment
VAR PayPalPayment: {INITIAL, PP_PAYMENT_EXECUTED};
ASSIGN
next(PayPalPayment) :=
case
(PayPalPayment = PP_PAYMENT_EXECUTED & input = service409_PM_ExecutePayment): INITIAL;
(input = service409_PM_ExecutePayment):{(PP_PAYMENT_EXECUTED)};
1:PayPalPayment;
esac;
-----------------------------------
--   P R E C O N D I T I O N S   --
-----------------------------------
TRANS (input = service409_PM_PaymentRequest) -> ((((HandlePayment = INITIAL))))
-----------------------------
--   I N V A R I A N T S   --
-----------------------------
--	 Synchronicity
TRANS (1-(input = UNDEF)) + (1-(output = UNDEF)) = 1

---------------------------------------
--   S Y N C H R O N I Z A T I O N   --
---------------------------------------
DEFINE SYNC0 := ((HandlePayment in {PAYMENT_EXECUTED}));
--	 Synchronicity enforcement
TRANS (service409 in {ST2}) -> (next(service409) != service409)
-------------------------------
--   C O N T R O L L E R S   --
-------------------------------
--	 Fault Controller
VAR FAULT_CONTROLLER: { START, STOP };
INIT FAULT_CONTROLLER = START

ASSIGN
next(FAULT_CONTROLLER) := 
case
(FAULT_CONTROLLER = START & FALSE): STOP;
1: FAULT_CONTROLLER;
esac;

TRANS (output != UNDEF | input != UNDEF) -> (FAULT_CONTROLLER != STOP)

-------------------------------------
--   I N I T I A L I Z A T I O N   --
-------------------------------------
INIT ((HandlePayment = INITIAL) & (PayPalPayment = INITIAL))
INIT ((service409 = ST0))

-----------------
--   G O A L   --
-----------------
MODULE main
VAR dn_main : dn_main;

GOAL ONEOF(
(dn_main.SYNC0), 1;
(dn_main.FAULT_CONTROLLER = STOP), 0

)