-------------------------------
--   C O M P O S I T I O N   --
-------------------------------
MODULE dn_main

---------------------
--   I N P U T S   --
---------------------
IVAR input:
{
UNDEF, service205_TO_HOAAorganizeTrip, service205_TO_ChosenTrip, service205_RESET
};

-----------------------
--   O U T P U T S   --
-----------------------
IVAR output:
{
UNDEF, service205_TO_DefineGoal, service205_TO_ChosenTripEnd
};

-------------------------
--   S E R V I C E S   --
-------------------------
--	 service205
VAR service205: {ST2, ST1, ST4, ST3, ST0};
ASSIGN
next(service205) :=
case
(service205 = ST0 & input = service205_TO_ChosenTrip): ST1;
(service205 = ST4 & input = service205_RESET): ST0;
(service205 = ST1 & input = service205_RESET): ST0;
(service205 = ST1 & output = service205_TO_DefineGoal): ST2;
(service205 = ST3 & output = service205_TO_ChosenTripEnd): ST4;
(service205 = ST2 & input = service205_RESET): ST0;
(service205 = ST3 & input = service205_RESET): ST0;
(service205 = ST2 & input = service205_TO_HOAAorganizeTrip): ST3;
1:service205;
esac;
TRANS ( input = service205_TO_HOAAorganizeTrip) -> (service205 = ST2)
TRANS ( input = service205_TO_ChosenTrip) -> (service205 = ST0)
TRANS ( input = service205_RESET) -> (service205 = ST2 | service205 = ST1 | service205 = ST4 | service205 = ST3)
TRANS ( output = service205_TO_DefineGoal) -> (service205 = ST1)
TRANS ( output = service205_TO_ChosenTripEnd) -> (service205 = ST3)

-----------------------
--   O B J E C T S   --
-----------------------
--	 SetupTrip
VAR SetupTrip: {ORGANIZED, INITIAL};
ASSIGN
next(SetupTrip) :=
case
(SetupTrip = INITIAL & output = service205_TO_ChosenTripEnd): ORGANIZED;
1:SetupTrip;
esac;
-----------------------------------
--   P R E C O N D I T I O N S   --
-----------------------------------
TRANS (input = service205_TO_ChosenTrip) -> ((((SetupTrip = INITIAL))))
-----------------------------
--   I N V A R I A N T S   --
-----------------------------
--	 Synchronicity
TRANS (1-(input = UNDEF)) + (1-(output = UNDEF)) = 1

---------------------------------------
--   S Y N C H R O N I Z A T I O N   --
---------------------------------------
DEFINE SYNC0 := ((SetupTrip in {ORGANIZED}));
--	 Synchronicity enforcement
TRANS (service205 in {ST1, ST3}) -> (next(service205) != service205)
-------------------------------
--   C O N T R O L L E R S   --
-------------------------------
--	 Fault Controller
VAR FAULT_CONTROLLER: { START, STOP };
INIT FAULT_CONTROLLER = START

ASSIGN
next(FAULT_CONTROLLER) := 
case
(FAULT_CONTROLLER = START & FALSE): STOP;
1: FAULT_CONTROLLER;
esac;

TRANS (output != UNDEF | input != UNDEF) -> (FAULT_CONTROLLER != STOP)

-------------------------------------
--   I N I T I A L I Z A T I O N   --
-------------------------------------
INIT ((SetupTrip = INITIAL))
INIT ((service205 = ST0))

-----------------
--   G O A L   --
-----------------
MODULE main
VAR dn_main : dn_main;

GOAL ONEOF(
(dn_main.SYNC0), 1;
(dn_main.FAULT_CONTROLLER = STOP), 0

)