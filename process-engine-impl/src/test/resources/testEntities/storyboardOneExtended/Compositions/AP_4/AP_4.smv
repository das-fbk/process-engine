-------------------------------
--   C O M P O S I T I O N   --
-------------------------------
MODULE dn_main

---------------------
--   I N P U T S   --
---------------------
IVAR input:
{
UNDEF, service11_RM_PickupPointRequest, service11_RESET
};

-----------------------
--   O U T P U T S   --
-----------------------
IVAR output:
{
UNDEF, service11_RM_PickupPointReply
};

-------------------------
--   S E R V I C E S   --
-------------------------
--	 service11
VAR service11: {ST2, ST1, ST0};
ASSIGN
next(service11) :=
case
(service11 = ST0 & input = service11_RM_PickupPointRequest): ST1;
(service11 = ST1 & output = service11_RM_PickupPointReply): ST2;
(service11 = ST1 & input = service11_RESET): ST0;
(service11 = ST2 & input = service11_RESET): ST0;
1:service11;
esac;
TRANS ( input = service11_RM_PickupPointRequest) -> (service11 = ST0)
TRANS ( input = service11_RESET) -> (service11 = ST2 | service11 = ST1)
TRANS ( output = service11_RM_PickupPointReply) -> (service11 = ST1)

-----------------------
--   O B J E C T S   --
-----------------------
--	 HandleRoute
VAR HandleRoute: {PICKUP_POINT_ADDED, INITIAL, PICKUP_POINT_REQUESTED};
ASSIGN
next(HandleRoute) :=
case
(HandleRoute = PICKUP_POINT_REQUESTED & output = service11_RM_PickupPointReply): PICKUP_POINT_ADDED;
(HandleRoute = INITIAL & input = service11_RM_PickupPointRequest): PICKUP_POINT_REQUESTED;
1:HandleRoute;
esac;
-----------------------------------
--   P R E C O N D I T I O N S   --
-----------------------------------
TRANS (input = service11_RM_PickupPointRequest) -> ((((HandleRoute = INITIAL))))
TRANS (output = service11_RM_PickupPointReply) -> ((((HandleRoute = PICKUP_POINT_REQUESTED))))
-----------------------------
--   I N V A R I A N T S   --
-----------------------------
--	 Synchronicity
TRANS (1-(input = UNDEF)) + (1-(output = UNDEF)) = 1

---------------------------------------
--   S Y N C H R O N I Z A T I O N   --
---------------------------------------
DEFINE SYNC0 := ((HandleRoute in {PICKUP_POINT_ADDED}));
--	 Synchronicity enforcement
TRANS (service11 in {ST1}) -> (next(service11) != service11)
-------------------------------
--   C O N T R O L L E R S   --
-------------------------------
--	 Fault Controller
VAR FAULT_CONTROLLER: { START, STOP };
INIT FAULT_CONTROLLER = START

ASSIGN
next(FAULT_CONTROLLER) := 
case
(FAULT_CONTROLLER = START & FALSE): STOP;
1: FAULT_CONTROLLER;
esac;

TRANS (output != UNDEF | input != UNDEF) -> (FAULT_CONTROLLER != STOP)

-------------------------------------
--   I N I T I A L I Z A T I O N   --
-------------------------------------
INIT ((HandleRoute = INITIAL))
INIT ((service11 = ST0))

-----------------
--   G O A L   --
-----------------
MODULE main
VAR dn_main : dn_main;

GOAL ONEOF(
(dn_main.SYNC0), 1;
(dn_main.FAULT_CONTROLLER = STOP), 0

)