//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.01.26 at 09:20:05 AM CET 
//

package eu.fbk.das.process.engine.api.jaxb;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 * A scope is a list of activities with attached eventhandlers
 * 
 * 
 * <p>
 * Java class for scopeType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name="scopeType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://das.fbk.eu/Process}activityType">
 *       &lt;sequence>
 *         &lt;group ref="{http://das.fbk.eu/Process}activity" maxOccurs="unbounded"/>
 *         &lt;sequence maxOccurs="unbounded">
 *           &lt;element name="eventHandler" type="{http://das.fbk.eu/Process}eventHandlerType"/>
 *         &lt;/sequence>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "scopeType", propOrder = { "activity", "eventHandler" })
public class ScopeType extends ActivityType {

    @XmlElements({ @XmlElement(name = "abstract", type = AbstractType.class),
	    @XmlElement(name = "concrete", type = ConcreteType.class),
	    @XmlElement(name = "switch", type = SwitchType.class),
	    @XmlElement(name = "pick", type = PickType.class),
	    @XmlElement(name = "receive", type = ReceiveType.class),
	    @XmlElement(name = "invoke", type = InvokeType.class),
	    @XmlElement(name = "while", type = WhileType.class),
	    @XmlElement(name = "scope", type = ScopeType.class) })
    protected List<ActivityType> activity;
    @XmlElement(required = true)
    protected List<EventHandlerType> eventHandler;

    /**
     * Gets the value of the activity property.
     * 
     * <p>
     * This accessor method returns a reference to the live list, not a
     * snapshot. Therefore any modification you make to the returned list will
     * be present inside the JAXB object. This is why there is not a
     * <CODE>set</CODE> method for the activity property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * 
     * <pre>
     * getActivity().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AbstractType } {@link ConcreteType } {@link SwitchType }
     * {@link PickType } {@link ReceiveType } {@link InvokeType } {@link WhileType }
     * {@link ScopeType }
     * 
     * 
     */
    public List<ActivityType> getActivity() {
	if (activity == null) {
	    activity = new ArrayList<ActivityType>();
	}
	return this.activity;
    }

    /**
     * Gets the value of the eventHandler property.
     * 
     * <p>
     * This accessor method returns a reference to the live list, not a
     * snapshot. Therefore any modification you make to the returned list will
     * be present inside the JAXB object. This is why there is not a
     * <CODE>set</CODE> method for the eventHandler property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * 
     * <pre>
     * getEventHandler().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EventHandlerType }
     * 
     * 
     */
    public List<EventHandlerType> getEventHandler() {
	if (eventHandler == null) {
	    eventHandler = new ArrayList<EventHandlerType>();
	}
	return this.eventHandler;
    }

}
