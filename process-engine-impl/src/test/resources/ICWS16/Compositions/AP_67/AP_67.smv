-------------------------------
--   C O M P O S I T I O N   --
-------------------------------
MODULE dn_main

---------------------
--   I N P U T S   --
---------------------
IVAR input:
{
UNDEF, service106_RM_PickupPointRequest, service106_RESET, service108_RM_RouteCreationRequest, service108_RESET, service110_RM_PassengerCheckInRequest, service110_RESET, service111_RM_StartRouteRequest, service111_RESET, service112_RM_EndRouteRequest, service112_RESET
};

-----------------------
--   O U T P U T S   --
-----------------------
IVAR output:
{
UNDEF, service106_RM_PickupPointReply, service108_RM_concrete1, service108_RM_concrete2, service108_RM_RouteCreationReply, service110_RM_PassengerCheckInReply, service111_RM_StartRouteReply, service112_RM_EndRouteReply
};

-------------------------
--   S E R V I C E S   --
-------------------------
--	 service106
VAR service106: {ST2, ST1, ST0};
ASSIGN
next(service106) :=
case
(service106 = ST2 & input = service106_RESET): ST0;
(service106 = ST0 & input = service106_RM_PickupPointRequest): ST1;
(service106 = ST1 & input = service106_RESET): ST0;
(service106 = ST1 & output = service106_RM_PickupPointReply): ST2;
1:service106;
esac;
TRANS ( input = service106_RM_PickupPointRequest) -> (service106 = ST0)
TRANS ( input = service106_RESET) -> (service106 = ST2 | service106 = ST1)
TRANS ( output = service106_RM_PickupPointReply) -> (service106 = ST1)

--	 service108
VAR service108: {ST2, ST1, ST4, ST3, ST0};
ASSIGN
next(service108) :=
case
(service108 = ST4 & input = service108_RESET): ST0;
(service108 = ST0 & input = service108_RM_RouteCreationRequest): ST1;
(service108 = ST3 & output = service108_RM_RouteCreationReply): ST4;
(service108 = ST2 & input = service108_RESET): ST0;
(service108 = ST1 & output = service108_RM_concrete1): ST2;
(service108 = ST2 & output = service108_RM_concrete2): ST3;
(service108 = ST3 & input = service108_RESET): ST0;
(service108 = ST1 & input = service108_RESET): ST0;
1:service108;
esac;
TRANS ( input = service108_RM_RouteCreationRequest) -> (service108 = ST0)
TRANS ( output = service108_RM_concrete1) -> (service108 = ST1)
TRANS ( output = service108_RM_concrete2) -> (service108 = ST2)
TRANS ( input = service108_RESET) -> (service108 = ST2 | service108 = ST1 | service108 = ST4 | service108 = ST3)
TRANS ( output = service108_RM_RouteCreationReply) -> (service108 = ST3)

--	 service110
VAR service110: {ST2, ST1, ST0};
ASSIGN
next(service110) :=
case
(service110 = ST0 & input = service110_RM_PassengerCheckInRequest): ST1;
(service110 = ST2 & input = service110_RESET): ST0;
(service110 = ST1 & input = service110_RESET): ST0;
(service110 = ST1 & output = service110_RM_PassengerCheckInReply): ST2;
1:service110;
esac;
TRANS ( output = service110_RM_PassengerCheckInReply) -> (service110 = ST1)
TRANS ( input = service110_RM_PassengerCheckInRequest) -> (service110 = ST0)
TRANS ( input = service110_RESET) -> (service110 = ST2 | service110 = ST1)

--	 service111
VAR service111: {ST2, ST1, ST0};
ASSIGN
next(service111) :=
case
(service111 = ST1 & output = service111_RM_StartRouteReply): ST2;
(service111 = ST0 & input = service111_RM_StartRouteRequest): ST1;
(service111 = ST2 & input = service111_RESET): ST0;
(service111 = ST1 & input = service111_RESET): ST0;
1:service111;
esac;
TRANS ( input = service111_RM_StartRouteRequest) -> (service111 = ST0)
TRANS ( input = service111_RESET) -> (service111 = ST2 | service111 = ST1)
TRANS ( output = service111_RM_StartRouteReply) -> (service111 = ST1)

--	 service112
VAR service112: {ST2, ST1, ST0};
ASSIGN
next(service112) :=
case
(service112 = ST2 & input = service112_RESET): ST0;
(service112 = ST0 & input = service112_RM_EndRouteRequest): ST1;
(service112 = ST1 & input = service112_RESET): ST0;
(service112 = ST1 & output = service112_RM_EndRouteReply): ST2;
1:service112;
esac;
TRANS ( output = service112_RM_EndRouteReply) -> (service112 = ST1)
TRANS ( input = service112_RM_EndRouteRequest) -> (service112 = ST0)
TRANS ( input = service112_RESET) -> (service112 = ST2 | service112 = ST1)

-----------------------
--   O B J E C T S   --
-----------------------
--	 HandleRoute
VAR HandleRoute: {ROUTE_STARTED, PICKUP_POINT_ADDED, ROUTE_COMPLETED, INITIAL, ROUTE_CLOSED, PASSENGER_CHECKED_IN, CHECK_IN_CLOSED, ROUTE_CREATED};
ASSIGN
next(HandleRoute) :=
case
(HandleRoute = ROUTE_CLOSED & output = service111_RM_StartRouteReply): ROUTE_STARTED;
(HandleRoute = INITIAL & input = service111_RM_StartRouteRequest): ROUTE_CLOSED;
(HandleRoute = ROUTE_STARTED & output = service110_RM_PassengerCheckInReply): PASSENGER_CHECKED_IN;
(HandleRoute = ROUTE_STARTED & input = service112_RM_EndRouteRequest): CHECK_IN_CLOSED;
(HandleRoute = ROUTE_CREATED & output = service106_RM_PickupPointReply): PICKUP_POINT_ADDED;
(HandleRoute = INITIAL & input = service110_RM_PassengerCheckInRequest): ROUTE_STARTED;
(HandleRoute = INITIAL & output = service108_RM_RouteCreationReply): ROUTE_CREATED;
(HandleRoute = CHECK_IN_CLOSED & output = service112_RM_EndRouteReply): ROUTE_COMPLETED;
1:HandleRoute;
esac;
-----------------------------------
--   P R E C O N D I T I O N S   --
-----------------------------------
TRANS (input = service106_RM_PickupPointRequest) -> ((((HandleRoute = ROUTE_CREATED))))
TRANS (input = service108_RM_RouteCreationRequest) -> ((((HandleRoute = INITIAL))))
TRANS (input = service110_RM_PassengerCheckInRequest) -> ((((HandleRoute = INITIAL))))
TRANS (input = service111_RM_StartRouteRequest) -> ((((HandleRoute = INITIAL))))
TRANS (input = service112_RM_EndRouteRequest) -> ((((HandleRoute = ROUTE_STARTED))))
-----------------------------
--   I N V A R I A N T S   --
-----------------------------
--	 Synchronicity
TRANS (1-(input = UNDEF)) + (1-(output = UNDEF)) = 1

---------------------------------------
--   S Y N C H R O N I Z A T I O N   --
---------------------------------------
DEFINE SYNC0 := ((HandleRoute in {ROUTE_STARTED}));
--	 Synchronicity enforcement
TRANS (service106 in {ST1}) -> (next(service106) != service106)
TRANS (service108 in {ST2, ST1, ST3}) -> (next(service108) != service108)
TRANS (service110 in {ST1}) -> (next(service110) != service110)
TRANS (service111 in {ST1}) -> (next(service111) != service111)
TRANS (service112 in {ST1}) -> (next(service112) != service112)
-------------------------------
--   C O N T R O L L E R S   --
-------------------------------
--	 Fault Controller
VAR FAULT_CONTROLLER: { START, STOP };
INIT FAULT_CONTROLLER = START

ASSIGN
next(FAULT_CONTROLLER) := 
case
(FAULT_CONTROLLER = START & FALSE): STOP;
1: FAULT_CONTROLLER;
esac;

TRANS (output != UNDEF | input != UNDEF) -> (FAULT_CONTROLLER != STOP)

-------------------------------------
--   I N I T I A L I Z A T I O N   --
-------------------------------------
INIT ((HandleRoute = INITIAL))
INIT ((service106 = ST0) & (service108 = ST0) & (service110 = ST0) & (service111 = ST0) & (service112 = ST0))

-----------------
--   G O A L   --
-----------------
MODULE main
VAR dn_main : dn_main;

GOAL ONEOF(
(dn_main.SYNC0), 1;
(dn_main.FAULT_CONTROLLER = STOP), 0

)