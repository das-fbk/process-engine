-------------------------------
--   C O M P O S I T I O N   --
-------------------------------
MODULE dn_main

---------------------
--   I N P U T S   --
---------------------
IVAR input:
{
UNDEF, service300_PR_FindPArkRequest, service300_PR_PlanCarRoute, service300_RESET, service301_PR_BookShuttleRequest, service301_RESET, service302_PR_ShuttleCheckInRequest, service302_RESET, service303_PR_RegistrationRequest, service303_RESET, service303_PR_bookPark, service304_PR_PayForParking, service304_RESET, service304_PR_ParkingRequest
};

-----------------------
--   O U T P U T S   --
-----------------------
IVAR output:
{
UNDEF, service300_PR_concrete2, service300_PR_concrete3, service300_PR_FindPArkAck, service300_PR_concrete1, service301_PR_concrete_3, service301_PR_BookShuttleAck, service301_PR_concrete_1, service301_PR_concrete_2, service302_PR_ShuttleCheckInAck, service303_PR_concrete_3, service303_PR_concrete_4, service303_PR_concrete_1, service303_PR_concrete_2, service303_PR_RegistrationAck, service304_PR_ParkingAck
};

-------------------------
--   S E R V I C E S   --
-------------------------
--	 service300
VAR service300: {ST2, ST1, ST4, ST3, ST6, ST5, ST0};
ASSIGN
next(service300) :=
case
(service300 = ST4 & input = service300_PR_PlanCarRoute): ST5;
(service300 = ST3 & input = service300_RESET): ST0;
(service300 = ST0 & input = service300_PR_FindPArkRequest): ST1;
(service300 = ST1 & output = service300_PR_concrete1): ST2;
(service300 = ST5 & input = service300_RESET): ST0;
(service300 = ST3 & output = service300_PR_concrete3): ST4;
(service300 = ST5 & output = service300_PR_FindPArkAck): ST6;
(service300 = ST6 & input = service300_RESET): ST0;
(service300 = ST1 & input = service300_RESET): ST0;
(service300 = ST4 & input = service300_RESET): ST0;
(service300 = ST2 & input = service300_RESET): ST0;
(service300 = ST2 & output = service300_PR_concrete2): ST3;
1:service300;
esac;
TRANS ( output = service300_PR_concrete2) -> (service300 = ST2)
TRANS ( output = service300_PR_concrete3) -> (service300 = ST3)
TRANS ( output = service300_PR_FindPArkAck) -> (service300 = ST5)
TRANS ( input = service300_PR_FindPArkRequest) -> (service300 = ST0)
TRANS ( input = service300_PR_PlanCarRoute) -> (service300 = ST4)
TRANS ( input = service300_RESET) -> (service300 = ST2 | service300 = ST1 | service300 = ST4 | service300 = ST3 | service300 = ST6 | service300 = ST5)
TRANS ( output = service300_PR_concrete1) -> (service300 = ST1)

--	 service301
VAR service301: {ST2, ST1, ST4, ST3, ST5, ST0};
ASSIGN
next(service301) :=
case
(service301 = ST3 & output = service301_PR_concrete_3): ST4;
(service301 = ST2 & input = service301_RESET): ST0;
(service301 = ST1 & output = service301_PR_concrete_1): ST2;
(service301 = ST4 & input = service301_RESET): ST0;
(service301 = ST3 & input = service301_RESET): ST0;
(service301 = ST5 & input = service301_RESET): ST0;
(service301 = ST0 & input = service301_PR_BookShuttleRequest): ST1;
(service301 = ST2 & output = service301_PR_concrete_2): ST3;
(service301 = ST4 & output = service301_PR_BookShuttleAck): ST5;
(service301 = ST1 & input = service301_RESET): ST0;
1:service301;
esac;
TRANS ( input = service301_PR_BookShuttleRequest) -> (service301 = ST0)
TRANS ( output = service301_PR_concrete_3) -> (service301 = ST3)
TRANS ( output = service301_PR_BookShuttleAck) -> (service301 = ST4)
TRANS ( output = service301_PR_concrete_1) -> (service301 = ST1)
TRANS ( output = service301_PR_concrete_2) -> (service301 = ST2)
TRANS ( input = service301_RESET) -> (service301 = ST2 | service301 = ST1 | service301 = ST4 | service301 = ST3 | service301 = ST5)

--	 service302
VAR service302: {ST2, ST1, ST0};
ASSIGN
next(service302) :=
case
(service302 = ST0 & input = service302_PR_ShuttleCheckInRequest): ST1;
(service302 = ST1 & output = service302_PR_ShuttleCheckInAck): ST2;
(service302 = ST1 & input = service302_RESET): ST0;
(service302 = ST2 & input = service302_RESET): ST0;
1:service302;
esac;
TRANS ( input = service302_PR_ShuttleCheckInRequest) -> (service302 = ST0)
TRANS ( input = service302_RESET) -> (service302 = ST2 | service302 = ST1)
TRANS ( output = service302_PR_ShuttleCheckInAck) -> (service302 = ST1)

--	 service303
VAR service303: {ST2, ST1, ST4, ST3, ST6, ST5, ST7, ST0};
ASSIGN
next(service303) :=
case
(service303 = ST1 & input = service303_RESET): ST0;
(service303 = ST5 & input = service303_RESET): ST0;
(service303 = ST6 & input = service303_PR_bookPark): ST7;
(service303 = ST5 & output = service303_PR_RegistrationAck): ST6;
(service303 = ST6 & input = service303_RESET): ST0;
(service303 = ST1 & output = service303_PR_concrete_1): ST2;
(service303 = ST3 & output = service303_PR_concrete_3): ST4;
(service303 = ST4 & input = service303_RESET): ST0;
(service303 = ST7 & input = service303_RESET): ST0;
(service303 = ST2 & output = service303_PR_concrete_2): ST3;
(service303 = ST0 & input = service303_PR_RegistrationRequest): ST1;
(service303 = ST3 & input = service303_RESET): ST0;
(service303 = ST4 & output = service303_PR_concrete_4): ST5;
(service303 = ST2 & input = service303_RESET): ST0;
1:service303;
esac;
TRANS ( output = service303_PR_concrete_3) -> (service303 = ST3)
TRANS ( output = service303_PR_concrete_4) -> (service303 = ST4)
TRANS ( output = service303_PR_concrete_1) -> (service303 = ST1)
TRANS ( output = service303_PR_concrete_2) -> (service303 = ST2)
TRANS ( input = service303_PR_RegistrationRequest) -> (service303 = ST0)
TRANS ( input = service303_RESET) -> (service303 = ST2 | service303 = ST1 | service303 = ST4 | service303 = ST3 | service303 = ST6 | service303 = ST5 | service303 = ST7)
TRANS ( input = service303_PR_bookPark) -> (service303 = ST6)
TRANS ( output = service303_PR_RegistrationAck) -> (service303 = ST5)

--	 service304
VAR service304: {ST2, ST1, ST3, ST0};
ASSIGN
next(service304) :=
case
(service304 = ST1 & input = service304_PR_PayForParking): ST2;
(service304 = ST2 & output = service304_PR_ParkingAck): ST3;
(service304 = ST2 & input = service304_RESET): ST0;
(service304 = ST0 & input = service304_PR_ParkingRequest): ST1;
(service304 = ST1 & input = service304_RESET): ST0;
(service304 = ST3 & input = service304_RESET): ST0;
1:service304;
esac;
TRANS ( input = service304_PR_PayForParking) -> (service304 = ST1)
TRANS ( output = service304_PR_ParkingAck) -> (service304 = ST2)
TRANS ( input = service304_RESET) -> (service304 = ST2 | service304 = ST1 | service304 = ST3)
TRANS ( input = service304_PR_ParkingRequest) -> (service304 = ST0)

-----------------------
--   O B J E C T S   --
-----------------------
--	 ParkAndRideTrip
VAR ParkAndRideTrip: {CAR_ROUTE_PLANNED, CHECK_IN_EXECUTED, PARK_REACHED, INITIAL, USER_REGISTERED, SHUTTLE_BOOKED};
ASSIGN
next(ParkAndRideTrip) :=
case
(ParkAndRideTrip = USER_REGISTERED & output = service300_PR_FindPArkAck): CAR_ROUTE_PLANNED;
(ParkAndRideTrip = PARK_REACHED & output = service301_PR_BookShuttleAck): SHUTTLE_BOOKED;
(ParkAndRideTrip = INITIAL & input = service303_PR_bookPark): USER_REGISTERED;
(ParkAndRideTrip = CAR_ROUTE_PLANNED & output = service304_PR_ParkingAck): PARK_REACHED;
(ParkAndRideTrip = SHUTTLE_BOOKED & output = service302_PR_ShuttleCheckInAck): CHECK_IN_EXECUTED;
1:ParkAndRideTrip;
esac;
--	 CarRoutePlan
VAR CarRoutePlan: {CAR_ROUTE_PLANNED, INITIAL};
ASSIGN
next(CarRoutePlan) :=
case
(input = service300_PR_PlanCarRoute):{(CAR_ROUTE_PLANNED)};
1:CarRoutePlan;
esac;
--	 HandlePayment
VAR HandlePayment: {PAYMENT_EXECUTED, INITIAL};
ASSIGN
next(HandlePayment) :=
case
(input = service304_PR_PayForParking):{(PAYMENT_EXECUTED)};
1:HandlePayment;
esac;
--	 ParkingManager
VAR ParkingManager: {PARK_BOOKED, INITIAL};
ASSIGN
next(ParkingManager) :=
case
(input = service303_PR_bookPark):{(PARK_BOOKED)};
1:ParkingManager;
esac;
-----------------------------------
--   P R E C O N D I T I O N S   --
-----------------------------------
TRANS (input = service300_PR_FindPArkRequest) -> ((((ParkAndRideTrip = USER_REGISTERED))))
TRANS (input = service301_PR_BookShuttleRequest) -> ((((ParkAndRideTrip = PARK_REACHED))))
TRANS (input = service302_PR_ShuttleCheckInRequest) -> ((((ParkAndRideTrip = SHUTTLE_BOOKED))))
TRANS (input = service303_PR_RegistrationRequest) -> ((((ParkAndRideTrip = INITIAL))))
TRANS (input = service304_PR_ParkingRequest) -> ((((ParkAndRideTrip = CAR_ROUTE_PLANNED))))
-----------------------------
--   I N V A R I A N T S   --
-----------------------------
--	 Synchronicity
TRANS (1-(input = UNDEF)) + (1-(output = UNDEF)) = 1

---------------------------------------
--   S Y N C H R O N I Z A T I O N   --
---------------------------------------
DEFINE SYNC0 := ((ParkAndRideTrip in {CAR_ROUTE_PLANNED}));
--	 Synchronicity enforcement
TRANS (service300 in {ST2, ST1, ST3, ST5}) -> (next(service300) != service300)
TRANS (service301 in {ST2, ST1, ST4, ST3}) -> (next(service301) != service301)
TRANS (service302 in {ST1}) -> (next(service302) != service302)
TRANS (service303 in {ST2, ST1, ST4, ST3, ST5}) -> (next(service303) != service303)
TRANS (service304 in {ST2}) -> (next(service304) != service304)
-------------------------------
--   C O N T R O L L E R S   --
-------------------------------
--	 Fault Controller
VAR FAULT_CONTROLLER: { START, STOP };
INIT FAULT_CONTROLLER = START

ASSIGN
next(FAULT_CONTROLLER) := 
case
(FAULT_CONTROLLER = START & FALSE): STOP;
1: FAULT_CONTROLLER;
esac;

TRANS (output != UNDEF | input != UNDEF) -> (FAULT_CONTROLLER != STOP)

-------------------------------------
--   I N I T I A L I Z A T I O N   --
-------------------------------------
INIT ((ParkAndRideTrip = INITIAL) & (CarRoutePlan = INITIAL) & (HandlePayment = INITIAL) & (ParkingManager = INITIAL))
INIT ((service300 = ST0) & (service301 = ST0) & (service302 = ST0) & (service303 = ST0) & (service304 = ST0))

-----------------
--   G O A L   --
-----------------
MODULE main
VAR dn_main : dn_main;

GOAL ONEOF(
(dn_main.SYNC0), 1;
(dn_main.FAULT_CONTROLLER = STOP), 0

)