-------------------------------
--   C O M P O S I T I O N   --
-------------------------------
MODULE dn_main

---------------------
--   I N P U T S   --
---------------------
IVAR input:
{
UNDEF, service2_FC_UserLoginRequest, service2_RESET, service4_RESET, service4_FC_UserRegistrationRequest, service5_FC_DriverLoginRequest, service5_RESET, service6_FC_ConfirmAndPay, service6_FC_FlexibusBookingRequest, service6_FC_PaymentReceipt, service6_FC_SetPassengerDetails, service6_RESET, service7_RESET, service7_FC_RouteAssignmentRequest, service7_FC_TakeFlexibus
};

-----------------------
--   O U T P U T S   --
-----------------------
IVAR output:
{
UNDEF, service2_FC_UserLoginAck, service4_FC_UserRegistrationAck, service5_FC_DriverLoginAck, service6_FC_TripDetails, service6_FC_BookingResult, service7_FC_RouteAssignmentReply
};

-------------------------
--   S E R V I C E S   --
-------------------------
--	 service2
VAR service2: {ST2, ST1, ST0};
ASSIGN
next(service2) :=
case
(service2 = ST1 & input = service2_RESET): ST0;
(service2 = ST0 & input = service2_FC_UserLoginRequest): ST1;
(service2 = ST1 & output = service2_FC_UserLoginAck): ST2;
(service2 = ST2 & input = service2_RESET): ST0;
1:service2;
esac;
TRANS ( input = service2_FC_UserLoginRequest) -> (service2 = ST0)
TRANS ( input = service2_RESET) -> (service2 = ST2 | service2 = ST1)
TRANS ( output = service2_FC_UserLoginAck) -> (service2 = ST1)

--	 service4
VAR service4: {ST2, ST1, ST0};
ASSIGN
next(service4) :=
case
(service4 = ST2 & input = service4_RESET): ST0;
(service4 = ST1 & input = service4_RESET): ST0;
(service4 = ST0 & input = service4_FC_UserRegistrationRequest): ST1;
(service4 = ST1 & output = service4_FC_UserRegistrationAck): ST2;
1:service4;
esac;
TRANS ( output = service4_FC_UserRegistrationAck) -> (service4 = ST1)
TRANS ( input = service4_RESET) -> (service4 = ST2 | service4 = ST1)
TRANS ( input = service4_FC_UserRegistrationRequest) -> (service4 = ST0)

--	 service5
VAR service5: {ST2, ST1, ST0};
ASSIGN
next(service5) :=
case
(service5 = ST1 & input = service5_RESET): ST0;
(service5 = ST2 & input = service5_RESET): ST0;
(service5 = ST0 & input = service5_FC_DriverLoginRequest): ST1;
(service5 = ST1 & output = service5_FC_DriverLoginAck): ST2;
1:service5;
esac;
TRANS ( output = service5_FC_DriverLoginAck) -> (service5 = ST1)
TRANS ( input = service5_FC_DriverLoginRequest) -> (service5 = ST0)
TRANS ( input = service5_RESET) -> (service5 = ST2 | service5 = ST1)

--	 service6
VAR service6: {ST2, ST1, ST4, ST3, ST6, ST5, ST0};
ASSIGN
next(service6) :=
case
(service6 = ST5 & input = service6_RESET): ST0;
(service6 = ST0 & input = service6_FC_FlexibusBookingRequest): ST1;
(service6 = ST2 & input = service6_FC_ConfirmAndPay): ST3;
(service6 = ST4 & input = service6_RESET): ST0;
(service6 = ST1 & output = service6_FC_TripDetails): ST2;
(service6 = ST4 & output = service6_FC_BookingResult): ST5;
(service6 = ST3 & input = service6_FC_PaymentReceipt): ST4;
(service6 = ST5 & input = service6_FC_SetPassengerDetails): ST6;
(service6 = ST2 & input = service6_RESET): ST0;
(service6 = ST1 & input = service6_RESET): ST0;
(service6 = ST6 & input = service6_RESET): ST0;
(service6 = ST3 & input = service6_RESET): ST0;
1:service6;
esac;
TRANS ( input = service6_FC_ConfirmAndPay) -> (service6 = ST2)
TRANS ( input = service6_FC_FlexibusBookingRequest) -> (service6 = ST0)
TRANS ( input = service6_FC_PaymentReceipt) -> (service6 = ST3)
TRANS ( input = service6_FC_SetPassengerDetails) -> (service6 = ST5)
TRANS ( output = service6_FC_TripDetails) -> (service6 = ST1)
TRANS ( output = service6_FC_BookingResult) -> (service6 = ST4)
TRANS ( input = service6_RESET) -> (service6 = ST2 | service6 = ST1 | service6 = ST4 | service6 = ST3 | service6 = ST6 | service6 = ST5)

--	 service7
VAR service7: {ST2, ST1, ST3, ST0};
ASSIGN
next(service7) :=
case
(service7 = ST1 & input = service7_RESET): ST0;
(service7 = ST3 & input = service7_RESET): ST0;
(service7 = ST2 & input = service7_RESET): ST0;
(service7 = ST0 & input = service7_FC_RouteAssignmentRequest): ST1;
(service7 = ST2 & input = service7_FC_TakeFlexibus): ST3;
(service7 = ST1 & output = service7_FC_RouteAssignmentReply): ST2;
1:service7;
esac;
TRANS ( input = service7_RESET) -> (service7 = ST2 | service7 = ST1 | service7 = ST3)
TRANS ( output = service7_FC_RouteAssignmentReply) -> (service7 = ST1)
TRANS ( input = service7_FC_RouteAssignmentRequest) -> (service7 = ST0)
TRANS ( input = service7_FC_TakeFlexibus) -> (service7 = ST2)

-----------------------
--   O B J E C T S   --
-----------------------
--	 HandlePayment
VAR HandlePayment: {PAYMENT_EXECUTED, INITIAL};
ASSIGN
next(HandlePayment) :=
case
(input = service6_FC_ConfirmAndPay):{(PAYMENT_EXECUTED)};
1:HandlePayment;
esac;
--	 FlexibusDriverStatus
VAR FlexibusDriverStatus: {ROUTE_STARTED, PASSENGERS_LOADED, AT_PICKUP_POINT, ROUTE_ENDED, INITIAL, ROUTE_CLOSED, FLEXIBUS_TAKEN, TAKING_PASSENGER};
ASSIGN
next(FlexibusDriverStatus) :=
case
(input = service7_FC_TakeFlexibus):{(FLEXIBUS_TAKEN)};
1:FlexibusDriverStatus;
esac;
--	 FlexibusTrip
VAR FlexibusTrip: {USER_LOGGED_IN, DRIVER_LOGGED_IN, TRIP_BOOKED, ROUTE_COMPLETED, INITIAL, USER_REGISTERED, ROUTE_ASSIGNED};
ASSIGN
next(FlexibusTrip) :=
case
(FlexibusTrip = USER_LOGGED_IN & input = service6_FC_SetPassengerDetails): TRIP_BOOKED;
(FlexibusTrip = INITIAL & output = service5_FC_DriverLoginAck): DRIVER_LOGGED_IN;
(FlexibusTrip = USER_REGISTERED & output = service2_FC_UserLoginAck): USER_LOGGED_IN;
(FlexibusTrip = DRIVER_LOGGED_IN & input = service7_FC_TakeFlexibus): ROUTE_ASSIGNED;
(FlexibusTrip = INITIAL & output = service4_FC_UserRegistrationAck): USER_REGISTERED;
1:FlexibusTrip;
esac;
--	 RoutePassengerStatus
VAR RoutePassengerStatus: {PASSENGER_DETAILS_DEFINED, DESTINATION_REACHED, INITIAL, PICKUP_POINT_REACHED, PASSENGER_CHECKED_IN, FLEXIBUS_ARRIVED};
ASSIGN
next(RoutePassengerStatus) :=
case
(input = service6_FC_SetPassengerDetails):{(PASSENGER_DETAILS_DEFINED)};
1:RoutePassengerStatus;
esac;
-----------------------------------
--   P R E C O N D I T I O N S   --
-----------------------------------
TRANS (input = service2_FC_UserLoginRequest) -> ((((FlexibusTrip = USER_REGISTERED))))
TRANS (input = service4_FC_UserRegistrationRequest) -> ((((FlexibusTrip = INITIAL))))
TRANS (input = service5_FC_DriverLoginRequest) -> ((((FlexibusTrip = INITIAL))))
TRANS (input = service6_FC_FlexibusBookingRequest) -> ((((FlexibusTrip = USER_LOGGED_IN))))
TRANS (input = service7_FC_RouteAssignmentRequest) -> ((((FlexibusTrip = DRIVER_LOGGED_IN))))
-----------------------------
--   I N V A R I A N T S   --
-----------------------------
--	 Synchronicity
TRANS (1-(input = UNDEF)) + (1-(output = UNDEF)) = 1

---------------------------------------
--   S Y N C H R O N I Z A T I O N   --
---------------------------------------
DEFINE SYNC0 := ((FlexibusTrip in {ROUTE_ASSIGNED}));
--	 Synchronicity enforcement
TRANS (service2 in {ST1}) -> (next(service2) != service2)
TRANS (service4 in {ST1}) -> (next(service4) != service4)
TRANS (service5 in {ST1}) -> (next(service5) != service5)
TRANS (service6 in {ST1, ST4}) -> (next(service6) != service6)
TRANS (service7 in {ST1}) -> (next(service7) != service7)
-------------------------------
--   C O N T R O L L E R S   --
-------------------------------
--	 Fault Controller
VAR FAULT_CONTROLLER: { START, STOP };
INIT FAULT_CONTROLLER = START

ASSIGN
next(FAULT_CONTROLLER) := 
case
(FAULT_CONTROLLER = START & FALSE): STOP;
1: FAULT_CONTROLLER;
esac;

TRANS (output != UNDEF | input != UNDEF) -> (FAULT_CONTROLLER != STOP)

-------------------------------------
--   I N I T I A L I Z A T I O N   --
-------------------------------------
INIT ((HandlePayment = INITIAL) & (FlexibusDriverStatus = INITIAL) & (FlexibusTrip = INITIAL) & (RoutePassengerStatus = INITIAL))
INIT ((service2 = ST0) & (service4 = ST0) & (service5 = ST0) & (service6 = ST0) & (service7 = ST0))

-----------------
--   G O A L   --
-----------------
MODULE main
VAR dn_main : dn_main;

GOAL ONEOF(
(dn_main.SYNC0), 1;
(dn_main.FAULT_CONTROLLER = STOP), 0

)