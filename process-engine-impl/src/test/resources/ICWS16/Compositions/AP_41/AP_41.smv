-------------------------------
--   C O M P O S I T I O N   --
-------------------------------
MODULE dn_main

---------------------
--   I N P U T S   --
---------------------
IVAR input:
{
UNDEF, service79_MMP_PlanRequest, service79_RESET
};

-----------------------
--   O U T P U T S   --
-----------------------
IVAR output:
{
UNDEF, service79_MMP_PlanResponse
};

-------------------------
--   S E R V I C E S   --
-------------------------
--	 service79
VAR service79: {ST2, ST1, ST0};
ASSIGN
next(service79) :=
case
(service79 = ST0 & input = service79_MMP_PlanRequest): ST1;
(service79 = ST1 & output = service79_MMP_PlanResponse): ST2;
(service79 = ST1 & input = service79_RESET): ST0;
(service79 = ST2 & input = service79_RESET): ST0;
1:service79;
esac;
TRANS ( output = service79_MMP_PlanResponse) -> (service79 = ST1)
TRANS ( input = service79_MMP_PlanRequest) -> (service79 = ST0)
TRANS ( input = service79_RESET) -> (service79 = ST2 | service79 = ST1)

-----------------------
--   O B J E C T S   --
-----------------------
--	 MultiModalPlanner
VAR MultiModalPlanner: {REQUEST_LOADED, INITIAL, PLANNING_COMPLETED};
ASSIGN
next(MultiModalPlanner) :=
case
(MultiModalPlanner = REQUEST_LOADED & output = service79_MMP_PlanResponse): PLANNING_COMPLETED;
(MultiModalPlanner = INITIAL & input = service79_MMP_PlanRequest): REQUEST_LOADED;
1:MultiModalPlanner;
esac;
-----------------------------------
--   P R E C O N D I T I O N S   --
-----------------------------------
TRANS (input = service79_MMP_PlanRequest) -> ((((MultiModalPlanner = INITIAL))))
TRANS (output = service79_MMP_PlanResponse) -> ((((MultiModalPlanner = REQUEST_LOADED))))
-----------------------------
--   I N V A R I A N T S   --
-----------------------------
--	 Synchronicity
TRANS (1-(input = UNDEF)) + (1-(output = UNDEF)) = 1

---------------------------------------
--   S Y N C H R O N I Z A T I O N   --
---------------------------------------
DEFINE SYNC0 := ((MultiModalPlanner in {PLANNING_COMPLETED}));
--	 Synchronicity enforcement
TRANS (service79 in {ST1}) -> (next(service79) != service79)
-------------------------------
--   C O N T R O L L E R S   --
-------------------------------
--	 Fault Controller
VAR FAULT_CONTROLLER: { START, STOP };
INIT FAULT_CONTROLLER = START

ASSIGN
next(FAULT_CONTROLLER) := 
case
(FAULT_CONTROLLER = START & FALSE): STOP;
1: FAULT_CONTROLLER;
esac;

TRANS (output != UNDEF | input != UNDEF) -> (FAULT_CONTROLLER != STOP)

-------------------------------------
--   I N I T I A L I Z A T I O N   --
-------------------------------------
INIT ((MultiModalPlanner = INITIAL))
INIT ((service79 = ST0))

-----------------
--   G O A L   --
-----------------
MODULE main
VAR dn_main : dn_main;

GOAL ONEOF(
(dn_main.SYNC0), 1;
(dn_main.FAULT_CONTROLLER = STOP), 0

)