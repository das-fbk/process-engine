-------------------------------
--   C O M P O S I T I O N   --
-------------------------------
MODULE dn_main

---------------------
--   I N P U T S   --
---------------------
IVAR input:
{
UNDEF, service26_RESET, service26_RegistrationRequest, service27_RESET, service27_FlexibusBookingRequest
};

-----------------------
--   O U T P U T S   --
-----------------------
IVAR output:
{
UNDEF, service26_RegistrationAck, service27_BookingResult
};

-------------------------
--   S E R V I C E S   --
-------------------------
--	 service26
VAR service26: {ST2, ST1, ST0};
ASSIGN
next(service26) :=
case
(service26 = ST1 & output = service26_RegistrationAck): ST2;
(service26 = ST0 & input = service26_RegistrationRequest): ST1;
(service26 = ST1 & input = service26_RESET): ST0;
(service26 = ST2 & input = service26_RESET): ST0;
1:service26;
esac;
TRANS ( output = service26_RegistrationAck) -> (service26 = ST1)
TRANS ( input = service26_RESET) -> (service26 = ST2 | service26 = ST1)
TRANS ( input = service26_RegistrationRequest) -> (service26 = ST0)

--	 service27
VAR service27: {ST2, ST1, ST0};
ASSIGN
next(service27) :=
case
(service27 = ST0 & input = service27_FlexibusBookingRequest): ST1;
(service27 = ST2 & input = service27_RESET): ST0;
(service27 = ST1 & input = service27_RESET): ST0;
(service27 = ST1 & output = service27_BookingResult): ST2;
1:service27;
esac;
TRANS ( output = service27_BookingResult) -> (service27 = ST1)
TRANS ( input = service27_RESET) -> (service27 = ST2 | service27 = ST1)
TRANS ( input = service27_FlexibusBookingRequest) -> (service27 = ST0)

-----------------------
--   O B J E C T S   --
-----------------------
--	 FlexibusTrip
VAR FlexibusTrip: {TRIPBOOKED, RINIT, USERREGISTERED, TRIPREQUESTED};
ASSIGN
next(FlexibusTrip) :=
case
(FlexibusTrip = USERREGISTERED & input = service27_FlexibusBookingRequest): TRIPREQUESTED;
(FlexibusTrip = TRIPREQUESTED & output = service27_BookingResult): TRIPBOOKED;
(FlexibusTrip = RINIT & output = service26_RegistrationAck): USERREGISTERED;
1:FlexibusTrip;
esac;
-----------------------------------
--   P R E C O N D I T I O N S   --
-----------------------------------
TRANS (input = service26_RegistrationRequest) -> ((((FlexibusTrip = RINIT))))
TRANS (input = service27_FlexibusBookingRequest) -> ((((FlexibusTrip = USERREGISTERED))))
-----------------------------
--   I N V A R I A N T S   --
-----------------------------
--	 Synchronicity
TRANS (1-(input = UNDEF)) + (1-(output = UNDEF)) = 1

---------------------------------------
--   S Y N C H R O N I Z A T I O N   --
---------------------------------------
DEFINE SYNC0 := ((FlexibusTrip in {TRIPBOOKED}));
--	 Synchronicity enforcement
TRANS (service26 in {ST1}) -> (next(service26) != service26)
TRANS (service27 in {ST1}) -> (next(service27) != service27)
-------------------------------
--   C O N T R O L L E R S   --
-------------------------------
--	 Fault Controller
VAR FAULT_CONTROLLER: { START, STOP };
INIT FAULT_CONTROLLER = START

ASSIGN
next(FAULT_CONTROLLER) := 
case
(FAULT_CONTROLLER = START & FALSE): STOP;
1: FAULT_CONTROLLER;
esac;

TRANS (output != UNDEF | input != UNDEF) -> (FAULT_CONTROLLER != STOP)

-------------------------------------
--   I N I T I A L I Z A T I O N   --
-------------------------------------
INIT ((FlexibusTrip = RINIT))
INIT ((service26 = ST0) & (service27 = ST0))

-----------------
--   G O A L   --
-----------------
MODULE main
VAR dn_main : dn_main;

GOAL ONEOF(
(dn_main.SYNC0), 1;
(dn_main.FAULT_CONTROLLER = STOP), 0

)