-------------------------------
--   C O M P O S I T I O N   --
-------------------------------
MODULE dn_main

---------------------
--   I N P U T S   --
---------------------
IVAR input:
{
UNDEF, service63_UMS_ManagementTrip, service63_UMS_TripManagementRequest, service63_RESET, service64_UMS_TripRequest, service64_RESET
};

-----------------------
--   O U T P U T S   --
-----------------------
IVAR output:
{
UNDEF, service63_UMS_concrete4, service63_UMS_concrete3, service63_UMS_concrete2, service63_UMS_concrete1, service63_UMS_TripManagementReply, service63_UMS_concrete5, service64_UMS_TripAlternatives, service64_UMS_concrete2, service64_UMS_concrete1
};

-------------------------
--   S E R V I C E S   --
-------------------------
--	 service63
VAR service63: {ST2, ST1, ST4, ST3, ST6, ST5, ST8, ST7, ST0};
ASSIGN
next(service63) :=
case
(service63 = ST2 & input = service63_RESET): ST0;
(service63 = ST3 & output = service63_UMS_concrete3): ST4;
(service63 = ST4 & output = service63_UMS_concrete4): ST5;
(service63 = ST6 & input = service63_UMS_ManagementTrip): ST7;
(service63 = ST5 & output = service63_UMS_concrete5): ST6;
(service63 = ST3 & input = service63_RESET): ST0;
(service63 = ST6 & input = service63_RESET): ST0;
(service63 = ST5 & input = service63_RESET): ST0;
(service63 = ST1 & output = service63_UMS_concrete1): ST2;
(service63 = ST1 & input = service63_RESET): ST0;
(service63 = ST8 & input = service63_RESET): ST0;
(service63 = ST7 & input = service63_RESET): ST0;
(service63 = ST4 & input = service63_RESET): ST0;
(service63 = ST0 & input = service63_UMS_TripManagementRequest): ST1;
(service63 = ST2 & output = service63_UMS_concrete2): ST3;
(service63 = ST7 & output = service63_UMS_TripManagementReply): ST8;
1:service63;
esac;
TRANS ( input = service63_UMS_ManagementTrip) -> (service63 = ST6)
TRANS ( output = service63_UMS_concrete4) -> (service63 = ST4)
TRANS ( input = service63_UMS_TripManagementRequest) -> (service63 = ST0)
TRANS ( output = service63_UMS_concrete3) -> (service63 = ST3)
TRANS ( output = service63_UMS_concrete2) -> (service63 = ST2)
TRANS ( input = service63_RESET) -> (service63 = ST2 | service63 = ST1 | service63 = ST4 | service63 = ST3 | service63 = ST6 | service63 = ST5 | service63 = ST8 | service63 = ST7)
TRANS ( output = service63_UMS_concrete1) -> (service63 = ST1)
TRANS ( output = service63_UMS_TripManagementReply) -> (service63 = ST7)
TRANS ( output = service63_UMS_concrete5) -> (service63 = ST5)

--	 service64
VAR service64: {ST2, ST1, ST4, ST3, ST0};
ASSIGN
next(service64) :=
case
(service64 = ST1 & output = service64_UMS_concrete1): ST2;
(service64 = ST0 & input = service64_UMS_TripRequest): ST1;
(service64 = ST2 & input = service64_RESET): ST0;
(service64 = ST4 & input = service64_RESET): ST0;
(service64 = ST3 & input = service64_RESET): ST0;
(service64 = ST1 & input = service64_RESET): ST0;
(service64 = ST2 & output = service64_UMS_concrete2): ST3;
(service64 = ST3 & output = service64_UMS_TripAlternatives): ST4;
1:service64;
esac;
TRANS ( input = service64_UMS_TripRequest) -> (service64 = ST0)
TRANS ( output = service64_UMS_TripAlternatives) -> (service64 = ST3)
TRANS ( output = service64_UMS_concrete2) -> (service64 = ST2)
TRANS ( input = service64_RESET) -> (service64 = ST2 | service64 = ST1 | service64 = ST4 | service64 = ST3)
TRANS ( output = service64_UMS_concrete1) -> (service64 = ST1)

-----------------------
--   O B J E C T S   --
-----------------------
--	 SetupTrip
VAR SetupTrip: {ORGANIZED, INITIAL};
ASSIGN
next(SetupTrip) :=
case
(input = service63_UMS_ManagementTrip):{(ORGANIZED)};
1:SetupTrip;
esac;
--	 ProvideTrip
VAR ProvideTrip: {TRIP_REQUEST_ACCOMPLISHED, TRIP_MANAGEMENT_ACCOMPLISHED, TRIP_MANAGE_REQUEST_LOADED, TRIP_REQUEST_LOADED, INITIAL};
ASSIGN
next(ProvideTrip) :=
case
(ProvideTrip = TRIP_REQUEST_LOADED & output = service64_UMS_TripAlternatives): TRIP_REQUEST_ACCOMPLISHED;
(ProvideTrip = INITIAL & input = service64_UMS_TripRequest): TRIP_REQUEST_LOADED;
(ProvideTrip = TRIP_MANAGE_REQUEST_LOADED & output = service63_UMS_TripManagementReply): TRIP_MANAGEMENT_ACCOMPLISHED;
(ProvideTrip = TRIP_REQUEST_ACCOMPLISHED & input = service63_UMS_TripManagementRequest): TRIP_MANAGE_REQUEST_LOADED;
1:ProvideTrip;
esac;
-----------------------------------
--   P R E C O N D I T I O N S   --
-----------------------------------
TRANS (input = service63_UMS_TripManagementRequest) -> ((((ProvideTrip = TRIP_REQUEST_ACCOMPLISHED))))
TRANS (output = service63_UMS_TripManagementReply) -> ((((ProvideTrip = TRIP_MANAGE_REQUEST_LOADED))))
TRANS (input = service64_UMS_TripRequest) -> ((((ProvideTrip = INITIAL))))
TRANS (output = service64_UMS_TripAlternatives) -> ((((ProvideTrip = TRIP_REQUEST_LOADED))))
-----------------------------
--   I N V A R I A N T S   --
-----------------------------
--	 Synchronicity
TRANS (1-(input = UNDEF)) + (1-(output = UNDEF)) = 1

---------------------------------------
--   S Y N C H R O N I Z A T I O N   --
---------------------------------------
DEFINE SYNC0 := ((ProvideTrip in {TRIP_REQUEST_ACCOMPLISHED}));
--	 Synchronicity enforcement
TRANS (service63 in {ST2, ST1, ST4, ST3, ST5, ST7}) -> (next(service63) != service63)
TRANS (service64 in {ST2, ST1, ST3}) -> (next(service64) != service64)
-------------------------------
--   C O N T R O L L E R S   --
-------------------------------
--	 Fault Controller
VAR FAULT_CONTROLLER: { START, STOP };
INIT FAULT_CONTROLLER = START

ASSIGN
next(FAULT_CONTROLLER) := 
case
(FAULT_CONTROLLER = START & FALSE): STOP;
1: FAULT_CONTROLLER;
esac;

TRANS (output != UNDEF | input != UNDEF) -> (FAULT_CONTROLLER != STOP)

-------------------------------------
--   I N I T I A L I Z A T I O N   --
-------------------------------------
INIT ((SetupTrip = INITIAL) & (ProvideTrip = INITIAL))
INIT ((service63 = ST0) & (service64 = ST0))

-----------------
--   G O A L   --
-----------------
MODULE main
VAR dn_main : dn_main;

GOAL ONEOF(
(dn_main.SYNC0), 1;
(dn_main.FAULT_CONTROLLER = STOP), 0

)