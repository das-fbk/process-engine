-------------------------------
--   C O M P O S I T I O N   --
-------------------------------
MODULE dn_main

---------------------
--   I N P U T S   --
---------------------
IVAR input:
{
UNDEF, service311_PR_FindPArkRequest, service311_PR_PlanCarRoute, service311_RESET, service313_PR_BookShuttleRequest, service313_RESET, service314_PR_ShuttleCheckInRequest, service314_RESET, service315_PR_RegistrationRequest, service315_RESET, service315_PR_bookPark, service316_PR_PayForParking, service316_RESET, service316_PR_ParkingRequest
};

-----------------------
--   O U T P U T S   --
-----------------------
IVAR output:
{
UNDEF, service311_PR_concrete2, service311_PR_concrete3, service311_PR_FindPArkAck, service311_PR_concrete1, service313_PR_concrete_3, service313_PR_BookShuttleAck, service313_PR_concrete_1, service313_PR_concrete_2, service314_PR_ShuttleCheckInAck, service315_PR_concrete_3, service315_PR_concrete_4, service315_PR_concrete_1, service315_PR_concrete_2, service315_PR_RegistrationAck, service316_PR_ParkingAck
};

-------------------------
--   S E R V I C E S   --
-------------------------
--	 service311
VAR service311: {ST2, ST1, ST4, ST3, ST6, ST5, ST0};
ASSIGN
next(service311) :=
case
(service311 = ST1 & input = service311_RESET): ST0;
(service311 = ST4 & input = service311_RESET): ST0;
(service311 = ST4 & input = service311_PR_PlanCarRoute): ST5;
(service311 = ST2 & output = service311_PR_concrete2): ST3;
(service311 = ST3 & output = service311_PR_concrete3): ST4;
(service311 = ST5 & output = service311_PR_FindPArkAck): ST6;
(service311 = ST5 & input = service311_RESET): ST0;
(service311 = ST6 & input = service311_RESET): ST0;
(service311 = ST0 & input = service311_PR_FindPArkRequest): ST1;
(service311 = ST2 & input = service311_RESET): ST0;
(service311 = ST1 & output = service311_PR_concrete1): ST2;
(service311 = ST3 & input = service311_RESET): ST0;
1:service311;
esac;
TRANS ( output = service311_PR_concrete2) -> (service311 = ST2)
TRANS ( output = service311_PR_concrete3) -> (service311 = ST3)
TRANS ( output = service311_PR_FindPArkAck) -> (service311 = ST5)
TRANS ( input = service311_PR_FindPArkRequest) -> (service311 = ST0)
TRANS ( input = service311_PR_PlanCarRoute) -> (service311 = ST4)
TRANS ( input = service311_RESET) -> (service311 = ST2 | service311 = ST1 | service311 = ST4 | service311 = ST3 | service311 = ST6 | service311 = ST5)
TRANS ( output = service311_PR_concrete1) -> (service311 = ST1)

--	 service313
VAR service313: {ST2, ST1, ST4, ST3, ST5, ST0};
ASSIGN
next(service313) :=
case
(service313 = ST2 & input = service313_RESET): ST0;
(service313 = ST1 & output = service313_PR_concrete_1): ST2;
(service313 = ST0 & input = service313_PR_BookShuttleRequest): ST1;
(service313 = ST1 & input = service313_RESET): ST0;
(service313 = ST4 & input = service313_RESET): ST0;
(service313 = ST3 & input = service313_RESET): ST0;
(service313 = ST3 & output = service313_PR_concrete_3): ST4;
(service313 = ST2 & output = service313_PR_concrete_2): ST3;
(service313 = ST5 & input = service313_RESET): ST0;
(service313 = ST4 & output = service313_PR_BookShuttleAck): ST5;
1:service313;
esac;
TRANS ( input = service313_PR_BookShuttleRequest) -> (service313 = ST0)
TRANS ( output = service313_PR_concrete_3) -> (service313 = ST3)
TRANS ( output = service313_PR_BookShuttleAck) -> (service313 = ST4)
TRANS ( output = service313_PR_concrete_1) -> (service313 = ST1)
TRANS ( output = service313_PR_concrete_2) -> (service313 = ST2)
TRANS ( input = service313_RESET) -> (service313 = ST2 | service313 = ST1 | service313 = ST4 | service313 = ST3 | service313 = ST5)

--	 service314
VAR service314: {ST2, ST1, ST0};
ASSIGN
next(service314) :=
case
(service314 = ST0 & input = service314_PR_ShuttleCheckInRequest): ST1;
(service314 = ST1 & output = service314_PR_ShuttleCheckInAck): ST2;
(service314 = ST1 & input = service314_RESET): ST0;
(service314 = ST2 & input = service314_RESET): ST0;
1:service314;
esac;
TRANS ( input = service314_PR_ShuttleCheckInRequest) -> (service314 = ST0)
TRANS ( input = service314_RESET) -> (service314 = ST2 | service314 = ST1)
TRANS ( output = service314_PR_ShuttleCheckInAck) -> (service314 = ST1)

--	 service315
VAR service315: {ST2, ST1, ST4, ST3, ST6, ST5, ST7, ST0};
ASSIGN
next(service315) :=
case
(service315 = ST0 & input = service315_PR_RegistrationRequest): ST1;
(service315 = ST2 & input = service315_RESET): ST0;
(service315 = ST7 & input = service315_RESET): ST0;
(service315 = ST2 & output = service315_PR_concrete_2): ST3;
(service315 = ST4 & input = service315_RESET): ST0;
(service315 = ST3 & input = service315_RESET): ST0;
(service315 = ST1 & output = service315_PR_concrete_1): ST2;
(service315 = ST1 & input = service315_RESET): ST0;
(service315 = ST4 & output = service315_PR_concrete_4): ST5;
(service315 = ST6 & input = service315_PR_bookPark): ST7;
(service315 = ST6 & input = service315_RESET): ST0;
(service315 = ST5 & input = service315_RESET): ST0;
(service315 = ST5 & output = service315_PR_RegistrationAck): ST6;
(service315 = ST3 & output = service315_PR_concrete_3): ST4;
1:service315;
esac;
TRANS ( output = service315_PR_concrete_3) -> (service315 = ST3)
TRANS ( output = service315_PR_concrete_4) -> (service315 = ST4)
TRANS ( output = service315_PR_concrete_1) -> (service315 = ST1)
TRANS ( output = service315_PR_concrete_2) -> (service315 = ST2)
TRANS ( input = service315_PR_RegistrationRequest) -> (service315 = ST0)
TRANS ( input = service315_RESET) -> (service315 = ST2 | service315 = ST1 | service315 = ST4 | service315 = ST3 | service315 = ST6 | service315 = ST5 | service315 = ST7)
TRANS ( input = service315_PR_bookPark) -> (service315 = ST6)
TRANS ( output = service315_PR_RegistrationAck) -> (service315 = ST5)

--	 service316
VAR service316: {ST2, ST1, ST3, ST0};
ASSIGN
next(service316) :=
case
(service316 = ST2 & output = service316_PR_ParkingAck): ST3;
(service316 = ST1 & input = service316_PR_PayForParking): ST2;
(service316 = ST0 & input = service316_PR_ParkingRequest): ST1;
(service316 = ST3 & input = service316_RESET): ST0;
(service316 = ST2 & input = service316_RESET): ST0;
(service316 = ST1 & input = service316_RESET): ST0;
1:service316;
esac;
TRANS ( input = service316_PR_PayForParking) -> (service316 = ST1)
TRANS ( output = service316_PR_ParkingAck) -> (service316 = ST2)
TRANS ( input = service316_RESET) -> (service316 = ST2 | service316 = ST1 | service316 = ST3)
TRANS ( input = service316_PR_ParkingRequest) -> (service316 = ST0)

-----------------------
--   O B J E C T S   --
-----------------------
--	 ParkAndRideTrip
VAR ParkAndRideTrip: {CAR_ROUTE_PLANNED, CHECK_IN_EXECUTED, PARK_REACHED, INITIAL, USER_REGISTERED, SHUTTLE_BOOKED};
ASSIGN
next(ParkAndRideTrip) :=
case
(ParkAndRideTrip = CAR_ROUTE_PLANNED & output = service316_PR_ParkingAck): PARK_REACHED;
(ParkAndRideTrip = PARK_REACHED & output = service313_PR_BookShuttleAck): SHUTTLE_BOOKED;
(ParkAndRideTrip = USER_REGISTERED & output = service311_PR_FindPArkAck): CAR_ROUTE_PLANNED;
(ParkAndRideTrip = INITIAL & input = service315_PR_bookPark): USER_REGISTERED;
(ParkAndRideTrip = SHUTTLE_BOOKED & output = service314_PR_ShuttleCheckInAck): CHECK_IN_EXECUTED;
1:ParkAndRideTrip;
esac;
--	 CarRoutePlan
VAR CarRoutePlan: {CAR_ROUTE_PLANNED, INITIAL};
ASSIGN
next(CarRoutePlan) :=
case
(input = service311_PR_PlanCarRoute):{(CAR_ROUTE_PLANNED)};
1:CarRoutePlan;
esac;
--	 HandlePayment
VAR HandlePayment: {PAYMENT_EXECUTED, INITIAL};
ASSIGN
next(HandlePayment) :=
case
(input = service316_PR_PayForParking):{(PAYMENT_EXECUTED)};
1:HandlePayment;
esac;
--	 ParkingManager
VAR ParkingManager: {PARK_BOOKED, INITIAL};
ASSIGN
next(ParkingManager) :=
case
(input = service315_PR_bookPark):{(PARK_BOOKED)};
1:ParkingManager;
esac;
-----------------------------------
--   P R E C O N D I T I O N S   --
-----------------------------------
TRANS (input = service311_PR_FindPArkRequest) -> ((((ParkAndRideTrip = USER_REGISTERED))))
TRANS (input = service313_PR_BookShuttleRequest) -> ((((ParkAndRideTrip = PARK_REACHED))))
TRANS (input = service314_PR_ShuttleCheckInRequest) -> ((((ParkAndRideTrip = SHUTTLE_BOOKED))))
TRANS (input = service315_PR_RegistrationRequest) -> ((((ParkAndRideTrip = INITIAL))))
TRANS (input = service316_PR_ParkingRequest) -> ((((ParkAndRideTrip = CAR_ROUTE_PLANNED))))
-----------------------------
--   I N V A R I A N T S   --
-----------------------------
--	 Synchronicity
TRANS (1-(input = UNDEF)) + (1-(output = UNDEF)) = 1

---------------------------------------
--   S Y N C H R O N I Z A T I O N   --
---------------------------------------
DEFINE SYNC0 := ((ParkAndRideTrip in {CAR_ROUTE_PLANNED}));
--	 Synchronicity enforcement
TRANS (service311 in {ST2, ST1, ST3, ST5}) -> (next(service311) != service311)
TRANS (service313 in {ST2, ST1, ST4, ST3}) -> (next(service313) != service313)
TRANS (service314 in {ST1}) -> (next(service314) != service314)
TRANS (service315 in {ST2, ST1, ST4, ST3, ST5}) -> (next(service315) != service315)
TRANS (service316 in {ST2}) -> (next(service316) != service316)
-------------------------------
--   C O N T R O L L E R S   --
-------------------------------
--	 Fault Controller
VAR FAULT_CONTROLLER: { START, STOP };
INIT FAULT_CONTROLLER = START

ASSIGN
next(FAULT_CONTROLLER) := 
case
(FAULT_CONTROLLER = START & FALSE): STOP;
1: FAULT_CONTROLLER;
esac;

TRANS (output != UNDEF | input != UNDEF) -> (FAULT_CONTROLLER != STOP)

-------------------------------------
--   I N I T I A L I Z A T I O N   --
-------------------------------------
INIT ((ParkAndRideTrip = INITIAL) & (CarRoutePlan = INITIAL) & (HandlePayment = INITIAL) & (ParkingManager = INITIAL))
INIT ((service311 = ST0) & (service313 = ST0) & (service314 = ST0) & (service315 = ST0) & (service316 = ST0))

-----------------
--   G O A L   --
-----------------
MODULE main
VAR dn_main : dn_main;

GOAL ONEOF(
(dn_main.SYNC0), 1;
(dn_main.FAULT_CONTROLLER = STOP), 0

)