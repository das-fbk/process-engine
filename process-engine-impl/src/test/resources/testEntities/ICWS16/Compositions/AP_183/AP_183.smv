-------------------------------
--   C O M P O S I T I O N   --
-------------------------------
MODULE dn_main

---------------------
--   I N P U T S   --
---------------------
IVAR input:
{
UNDEF, service361_BS_RegistrationRequest, service361_BS_UpdateSmartMobilityCard, service361_RESET, service362_BS_PlanBikeRoute, service362_BS_ExecuteRouteRequest, service362_RESET
};

-----------------------
--   O U T P U T S   --
-----------------------
IVAR output:
{
UNDEF, service361_BS_RegistrationAck, service362_BS_ExecuteRouteAck
};

-------------------------
--   S E R V I C E S   --
-------------------------
--	 service361
VAR service361: {ST2, ST1, ST3, ST0};
ASSIGN
next(service361) :=
case
(service361 = ST2 & input = service361_RESET): ST0;
(service361 = ST1 & input = service361_BS_UpdateSmartMobilityCard): ST2;
(service361 = ST0 & input = service361_BS_RegistrationRequest): ST1;
(service361 = ST3 & input = service361_RESET): ST0;
(service361 = ST1 & input = service361_RESET): ST0;
(service361 = ST2 & output = service361_BS_RegistrationAck): ST3;
1:service361;
esac;
TRANS ( input = service361_BS_RegistrationRequest) -> (service361 = ST0)
TRANS ( output = service361_BS_RegistrationAck) -> (service361 = ST2)
TRANS ( input = service361_BS_UpdateSmartMobilityCard) -> (service361 = ST1)
TRANS ( input = service361_RESET) -> (service361 = ST2 | service361 = ST1 | service361 = ST3)

--	 service362
VAR service362: {ST2, ST1, ST3, ST0};
ASSIGN
next(service362) :=
case
(service362 = ST3 & input = service362_RESET): ST0;
(service362 = ST1 & input = service362_BS_PlanBikeRoute): ST2;
(service362 = ST2 & input = service362_RESET): ST0;
(service362 = ST2 & output = service362_BS_ExecuteRouteAck): ST3;
(service362 = ST0 & input = service362_BS_ExecuteRouteRequest): ST1;
(service362 = ST1 & input = service362_RESET): ST0;
1:service362;
esac;
TRANS ( input = service362_BS_PlanBikeRoute) -> (service362 = ST1)
TRANS ( input = service362_BS_ExecuteRouteRequest) -> (service362 = ST0)
TRANS ( input = service362_RESET) -> (service362 = ST2 | service362 = ST1 | service362 = ST3)
TRANS ( output = service362_BS_ExecuteRouteAck) -> (service362 = ST2)

-----------------------
--   O B J E C T S   --
-----------------------
--	 BikeRoutePlan
VAR BikeRoutePlan: {ROUTE_PLANNED, INITIAL};
ASSIGN
next(BikeRoutePlan) :=
case
(input = service362_BS_PlanBikeRoute):{(ROUTE_PLANNED)};
1:BikeRoutePlan;
esac;
--	 BikeSharingTrip
VAR BikeSharingTrip: {RACK_REACHED, INITIAL, BIKE_ROUTE_PLANNED, USER_REGISTERED};
ASSIGN
next(BikeSharingTrip) :=
case
(BikeSharingTrip = BIKE_ROUTE_PLANNED & output = service362_BS_ExecuteRouteAck): RACK_REACHED;
(BikeSharingTrip = USER_REGISTERED & input = service362_BS_PlanBikeRoute): BIKE_ROUTE_PLANNED;
(BikeSharingTrip = INITIAL & output = service361_BS_RegistrationAck): USER_REGISTERED;
1:BikeSharingTrip;
esac;
--	 HandleSmartMobilityCard
VAR HandleSmartMobilityCard: {INITIAL, SUBSCRIPTION, CARD_RELEASED, SERVICE_ADDED};
ASSIGN
next(HandleSmartMobilityCard) :=
case
(HandleSmartMobilityCard = SERVICE_ADDED & input = service361_BS_UpdateSmartMobilityCard): CARD_RELEASED;
(input = service361_BS_UpdateSmartMobilityCard):{(SERVICE_ADDED)};
1:HandleSmartMobilityCard;
esac;
-----------------------------------
--   P R E C O N D I T I O N S   --
-----------------------------------
TRANS (input = service361_BS_RegistrationRequest) -> ((((BikeSharingTrip = INITIAL))))
TRANS (input = service362_BS_ExecuteRouteRequest) -> ((((BikeSharingTrip = USER_REGISTERED))))
-----------------------------
--   I N V A R I A N T S   --
-----------------------------
--	 Synchronicity
TRANS (1-(input = UNDEF)) + (1-(output = UNDEF)) = 1

---------------------------------------
--   S Y N C H R O N I Z A T I O N   --
---------------------------------------
DEFINE SYNC0 := ((BikeSharingTrip in {USER_REGISTERED}));
--	 Synchronicity enforcement
TRANS (service361 in {ST2}) -> (next(service361) != service361)
TRANS (service362 in {ST2}) -> (next(service362) != service362)
-------------------------------
--   C O N T R O L L E R S   --
-------------------------------
--	 Fault Controller
VAR FAULT_CONTROLLER: { START, STOP };
INIT FAULT_CONTROLLER = START

ASSIGN
next(FAULT_CONTROLLER) := 
case
(FAULT_CONTROLLER = START & FALSE): STOP;
1: FAULT_CONTROLLER;
esac;

TRANS (output != UNDEF | input != UNDEF) -> (FAULT_CONTROLLER != STOP)

-------------------------------------
--   I N I T I A L I Z A T I O N   --
-------------------------------------
INIT ((BikeRoutePlan = INITIAL) & (BikeSharingTrip = INITIAL) & (HandleSmartMobilityCard = INITIAL))
INIT ((service361 = ST0) & (service362 = ST0))

-----------------
--   G O A L   --
-----------------
MODULE main
VAR dn_main : dn_main;

GOAL ONEOF(
(dn_main.SYNC0), 1;
(dn_main.FAULT_CONTROLLER = STOP), 0

)