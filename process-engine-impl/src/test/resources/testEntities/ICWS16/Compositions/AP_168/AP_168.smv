-------------------------------
--   C O M P O S I T I O N   --
-------------------------------
MODULE dn_main

---------------------
--   I N P U T S   --
---------------------
IVAR input:
{
UNDEF, service281_FC_UserLoginRequest, service281_RESET, service282_BS_RegistrationRequest, service282_BS_UpdateSmartMobilityCard, service282_RESET, service283_RESET, service283_FC_UserRegistrationRequest, service284_RESET, service284_FC_RouteAssignmentRequest, service284_FC_TakeFlexibus, service285_FC_DriverLoginRequest, service285_RESET, service286_BS_PlanBikeRoute, service286_BS_ExecuteRouteRequest, service286_RESET, service287_FC_ConfirmAndPay, service287_FC_FlexibusBookingRequest, service287_FC_PaymentReceipt, service287_FC_SetPassengerDetails, service287_RESET
};

-----------------------
--   O U T P U T S   --
-----------------------
IVAR output:
{
UNDEF, service281_FC_UserLoginAck, service282_BS_RegistrationAck, service283_FC_UserRegistrationAck, service284_FC_RouteAssignmentReply, service285_FC_DriverLoginAck, service286_BS_ExecuteRouteAck, service287_FC_TripDetails, service287_FC_BookingResult
};

-------------------------
--   S E R V I C E S   --
-------------------------
--	 service281
VAR service281: {ST2, ST1, ST0};
ASSIGN
next(service281) :=
case
(service281 = ST1 & output = service281_FC_UserLoginAck): ST2;
(service281 = ST0 & input = service281_FC_UserLoginRequest): ST1;
(service281 = ST2 & input = service281_RESET): ST0;
(service281 = ST1 & input = service281_RESET): ST0;
1:service281;
esac;
TRANS ( input = service281_FC_UserLoginRequest) -> (service281 = ST0)
TRANS ( input = service281_RESET) -> (service281 = ST2 | service281 = ST1)
TRANS ( output = service281_FC_UserLoginAck) -> (service281 = ST1)

--	 service282
VAR service282: {ST2, ST1, ST3, ST0};
ASSIGN
next(service282) :=
case
(service282 = ST1 & input = service282_BS_UpdateSmartMobilityCard): ST2;
(service282 = ST2 & output = service282_BS_RegistrationAck): ST3;
(service282 = ST0 & input = service282_BS_RegistrationRequest): ST1;
(service282 = ST2 & input = service282_RESET): ST0;
(service282 = ST1 & input = service282_RESET): ST0;
(service282 = ST3 & input = service282_RESET): ST0;
1:service282;
esac;
TRANS ( input = service282_BS_RegistrationRequest) -> (service282 = ST0)
TRANS ( output = service282_BS_RegistrationAck) -> (service282 = ST2)
TRANS ( input = service282_BS_UpdateSmartMobilityCard) -> (service282 = ST1)
TRANS ( input = service282_RESET) -> (service282 = ST2 | service282 = ST1 | service282 = ST3)

--	 service283
VAR service283: {ST2, ST1, ST0};
ASSIGN
next(service283) :=
case
(service283 = ST1 & output = service283_FC_UserRegistrationAck): ST2;
(service283 = ST0 & input = service283_FC_UserRegistrationRequest): ST1;
(service283 = ST1 & input = service283_RESET): ST0;
(service283 = ST2 & input = service283_RESET): ST0;
1:service283;
esac;
TRANS ( output = service283_FC_UserRegistrationAck) -> (service283 = ST1)
TRANS ( input = service283_RESET) -> (service283 = ST2 | service283 = ST1)
TRANS ( input = service283_FC_UserRegistrationRequest) -> (service283 = ST0)

--	 service284
VAR service284: {ST2, ST1, ST3, ST0};
ASSIGN
next(service284) :=
case
(service284 = ST2 & input = service284_FC_TakeFlexibus): ST3;
(service284 = ST0 & input = service284_FC_RouteAssignmentRequest): ST1;
(service284 = ST2 & input = service284_RESET): ST0;
(service284 = ST1 & input = service284_RESET): ST0;
(service284 = ST3 & input = service284_RESET): ST0;
(service284 = ST1 & output = service284_FC_RouteAssignmentReply): ST2;
1:service284;
esac;
TRANS ( input = service284_RESET) -> (service284 = ST2 | service284 = ST1 | service284 = ST3)
TRANS ( output = service284_FC_RouteAssignmentReply) -> (service284 = ST1)
TRANS ( input = service284_FC_RouteAssignmentRequest) -> (service284 = ST0)
TRANS ( input = service284_FC_TakeFlexibus) -> (service284 = ST2)

--	 service285
VAR service285: {ST2, ST1, ST0};
ASSIGN
next(service285) :=
case
(service285 = ST2 & input = service285_RESET): ST0;
(service285 = ST0 & input = service285_FC_DriverLoginRequest): ST1;
(service285 = ST1 & input = service285_RESET): ST0;
(service285 = ST1 & output = service285_FC_DriverLoginAck): ST2;
1:service285;
esac;
TRANS ( output = service285_FC_DriverLoginAck) -> (service285 = ST1)
TRANS ( input = service285_FC_DriverLoginRequest) -> (service285 = ST0)
TRANS ( input = service285_RESET) -> (service285 = ST2 | service285 = ST1)

--	 service286
VAR service286: {ST2, ST1, ST3, ST0};
ASSIGN
next(service286) :=
case
(service286 = ST2 & output = service286_BS_ExecuteRouteAck): ST3;
(service286 = ST1 & input = service286_BS_PlanBikeRoute): ST2;
(service286 = ST2 & input = service286_RESET): ST0;
(service286 = ST1 & input = service286_RESET): ST0;
(service286 = ST3 & input = service286_RESET): ST0;
(service286 = ST0 & input = service286_BS_ExecuteRouteRequest): ST1;
1:service286;
esac;
TRANS ( input = service286_BS_PlanBikeRoute) -> (service286 = ST1)
TRANS ( input = service286_BS_ExecuteRouteRequest) -> (service286 = ST0)
TRANS ( input = service286_RESET) -> (service286 = ST2 | service286 = ST1 | service286 = ST3)
TRANS ( output = service286_BS_ExecuteRouteAck) -> (service286 = ST2)

--	 service287
VAR service287: {ST2, ST1, ST4, ST3, ST6, ST5, ST0};
ASSIGN
next(service287) :=
case
(service287 = ST6 & input = service287_RESET): ST0;
(service287 = ST4 & input = service287_RESET): ST0;
(service287 = ST1 & input = service287_RESET): ST0;
(service287 = ST2 & input = service287_FC_ConfirmAndPay): ST3;
(service287 = ST5 & input = service287_FC_SetPassengerDetails): ST6;
(service287 = ST2 & input = service287_RESET): ST0;
(service287 = ST3 & input = service287_RESET): ST0;
(service287 = ST5 & input = service287_RESET): ST0;
(service287 = ST4 & output = service287_FC_BookingResult): ST5;
(service287 = ST0 & input = service287_FC_FlexibusBookingRequest): ST1;
(service287 = ST1 & output = service287_FC_TripDetails): ST2;
(service287 = ST3 & input = service287_FC_PaymentReceipt): ST4;
1:service287;
esac;
TRANS ( input = service287_FC_ConfirmAndPay) -> (service287 = ST2)
TRANS ( input = service287_FC_FlexibusBookingRequest) -> (service287 = ST0)
TRANS ( input = service287_FC_PaymentReceipt) -> (service287 = ST3)
TRANS ( input = service287_FC_SetPassengerDetails) -> (service287 = ST5)
TRANS ( output = service287_FC_TripDetails) -> (service287 = ST1)
TRANS ( output = service287_FC_BookingResult) -> (service287 = ST4)
TRANS ( input = service287_RESET) -> (service287 = ST2 | service287 = ST1 | service287 = ST4 | service287 = ST3 | service287 = ST6 | service287 = ST5)

-----------------------
--   O B J E C T S   --
-----------------------
--	 BikeRoutePlan
VAR BikeRoutePlan: {ROUTE_PLANNED, INITIAL};
ASSIGN
next(BikeRoutePlan) :=
case
(input = service286_BS_PlanBikeRoute):{(ROUTE_PLANNED)};
1:BikeRoutePlan;
esac;
--	 HandlePayment
VAR HandlePayment: {PAYMENT_EXECUTED, INITIAL};
ASSIGN
next(HandlePayment) :=
case
(input = service287_FC_ConfirmAndPay):{(PAYMENT_EXECUTED)};
1:HandlePayment;
esac;
--	 FlexibusDriverStatus
VAR FlexibusDriverStatus: {ROUTE_STARTED, PASSENGERS_LOADED, AT_PICKUP_POINT, ROUTE_ENDED, INITIAL, ROUTE_CLOSED, FLEXIBUS_TAKEN, TAKING_PASSENGER};
ASSIGN
next(FlexibusDriverStatus) :=
case
(input = service284_FC_TakeFlexibus):{(FLEXIBUS_TAKEN)};
1:FlexibusDriverStatus;
esac;
--	 FlexibusTrip
VAR FlexibusTrip: {USER_LOGGED_IN, DRIVER_LOGGED_IN, TRIP_BOOKED, ROUTE_COMPLETED, INITIAL, USER_REGISTERED, ROUTE_ASSIGNED};
ASSIGN
next(FlexibusTrip) :=
case
(FlexibusTrip = INITIAL & output = service283_FC_UserRegistrationAck): USER_REGISTERED;
(FlexibusTrip = DRIVER_LOGGED_IN & input = service284_FC_TakeFlexibus): ROUTE_ASSIGNED;
(FlexibusTrip = USER_REGISTERED & output = service281_FC_UserLoginAck): USER_LOGGED_IN;
(FlexibusTrip = USER_LOGGED_IN & input = service287_FC_SetPassengerDetails): TRIP_BOOKED;
(FlexibusTrip = INITIAL & output = service285_FC_DriverLoginAck): DRIVER_LOGGED_IN;
1:FlexibusTrip;
esac;
--	 BikeSharingTrip
VAR BikeSharingTrip: {RACK_REACHED, INITIAL, BIKE_ROUTE_PLANNED, USER_REGISTERED};
ASSIGN
next(BikeSharingTrip) :=
case
(BikeSharingTrip = USER_REGISTERED & input = service286_BS_PlanBikeRoute): BIKE_ROUTE_PLANNED;
(BikeSharingTrip = INITIAL & output = service282_BS_RegistrationAck): USER_REGISTERED;
(BikeSharingTrip = BIKE_ROUTE_PLANNED & output = service286_BS_ExecuteRouteAck): RACK_REACHED;
1:BikeSharingTrip;
esac;
--	 RoutePassengerStatus
VAR RoutePassengerStatus: {PASSENGER_DETAILS_DEFINED, DESTINATION_REACHED, INITIAL, PICKUP_POINT_REACHED, PASSENGER_CHECKED_IN, FLEXIBUS_ARRIVED};
ASSIGN
next(RoutePassengerStatus) :=
case
(input = service287_FC_SetPassengerDetails):{(PASSENGER_DETAILS_DEFINED)};
1:RoutePassengerStatus;
esac;
--	 HandleSmartMobilityCard
VAR HandleSmartMobilityCard: {INITIAL, SUBSCRIPTION, CARD_RELEASED, SERVICE_ADDED};
ASSIGN
next(HandleSmartMobilityCard) :=
case
(HandleSmartMobilityCard = SERVICE_ADDED & input = service282_BS_UpdateSmartMobilityCard): CARD_RELEASED;
(input = service282_BS_UpdateSmartMobilityCard):{(SERVICE_ADDED)};
1:HandleSmartMobilityCard;
esac;
-----------------------------------
--   P R E C O N D I T I O N S   --
-----------------------------------
TRANS (input = service281_FC_UserLoginRequest) -> ((((FlexibusTrip = USER_REGISTERED))))
TRANS (input = service282_BS_RegistrationRequest) -> ((((BikeSharingTrip = INITIAL))))
TRANS (input = service283_FC_UserRegistrationRequest) -> ((((FlexibusTrip = INITIAL))))
TRANS (input = service284_FC_RouteAssignmentRequest) -> ((((FlexibusTrip = DRIVER_LOGGED_IN))))
TRANS (input = service285_FC_DriverLoginRequest) -> ((((FlexibusTrip = INITIAL))))
TRANS (input = service286_BS_ExecuteRouteRequest) -> ((((BikeSharingTrip = USER_REGISTERED))))
TRANS (input = service287_FC_FlexibusBookingRequest) -> ((((FlexibusTrip = USER_LOGGED_IN))))
-----------------------------
--   I N V A R I A N T S   --
-----------------------------
--	 Synchronicity
TRANS (1-(input = UNDEF)) + (1-(output = UNDEF)) = 1

---------------------------------------
--   S Y N C H R O N I Z A T I O N   --
---------------------------------------
DEFINE SYNC0 := ((FlexibusTrip in {TRIP_BOOKED}) & (BikeSharingTrip in {USER_REGISTERED}));
--	 Synchronicity enforcement
TRANS (service281 in {ST1}) -> (next(service281) != service281)
TRANS (service282 in {ST2}) -> (next(service282) != service282)
TRANS (service283 in {ST1}) -> (next(service283) != service283)
TRANS (service284 in {ST1}) -> (next(service284) != service284)
TRANS (service285 in {ST1}) -> (next(service285) != service285)
TRANS (service286 in {ST2}) -> (next(service286) != service286)
TRANS (service287 in {ST1, ST4}) -> (next(service287) != service287)
-------------------------------
--   C O N T R O L L E R S   --
-------------------------------
--	 Fault Controller
VAR FAULT_CONTROLLER: { START, STOP };
INIT FAULT_CONTROLLER = START

ASSIGN
next(FAULT_CONTROLLER) := 
case
(FAULT_CONTROLLER = START & FALSE): STOP;
1: FAULT_CONTROLLER;
esac;

TRANS (output != UNDEF | input != UNDEF) -> (FAULT_CONTROLLER != STOP)

-------------------------------------
--   I N I T I A L I Z A T I O N   --
-------------------------------------
INIT ((BikeRoutePlan = INITIAL) & (HandlePayment = INITIAL) & (FlexibusDriverStatus = INITIAL) & (FlexibusTrip = INITIAL) & (BikeSharingTrip = INITIAL) & (RoutePassengerStatus = INITIAL) & (HandleSmartMobilityCard = INITIAL))
INIT ((service281 = ST0) & (service282 = ST0) & (service283 = ST0) & (service284 = ST0) & (service285 = ST0) & (service286 = ST0) & (service287 = ST0))

-----------------
--   G O A L   --
-----------------
MODULE main
VAR dn_main : dn_main;

GOAL ONEOF(
(dn_main.SYNC0), 1;
(dn_main.FAULT_CONTROLLER = STOP), 0

)